{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/JSRuntime.js","node_modules/@parcel/runtime-js/lib/bundle-url.js","node_modules/@parcel/runtime-js/lib/relative-path.js","src/logic/fluids.js","/mnt/c/WebXR/utopic-estudios/node_modules/@parcel/scope-hoisting/lib/helpers.js"],"names":["mapping","id","resolved","Error","pairs","keys","Object","i","length","$bd72ee1865b930c1fed8ae47f35e91$export$register","JSON","parse","bundleURL","err","matches","stack","match","replace","getBundleURL","resolve","$bd72ee1865b930c1fed8ae47f35e91$export$resolve","dirname","_filePath","filePath","slice","slashIndex","lastIndexOf","relative","from","to","fromParts","split","shift","divergeIndex","toParts","parts","push","apply","join","$e5b69ae2ffddc223b376d75aff9c28$exports","fromId","toId","_dirname","_relative","$d3c0201b9530235334efc$exports","$da3a6c17234c5d68d4f1108f53a7bad4$export$getBundleURL","canvas","document","querySelector","resizeCanvas","config","SIM_RESOLUTION","DYE_RESOLUTION","CAPTURE_RESOLUTION","DENSITY_DISSIPATION","VELOCITY_DISSIPATION","PRESSURE","PRESSURE_ITERATIONS","CURL","SPLAT_RADIUS","SPLAT_FORCE","SHADING","COLORFUL","COLOR_UPDATE_SPEED","PAUSED","BACK_COLOR","r","g","b","TRANSPARENT","BLOOM","BLOOM_ITERATIONS","BLOOM_RESOLUTION","BLOOM_INTENSITY","BLOOM_THRESHOLD","BLOOM_SOFT_KNEE","SUNRAYS","SUNRAYS_RESOLUTION","SUNRAYS_WEIGHT","pointerPrototype","this","texcoordX","texcoordY","prevTexcoordX","prevTexcoordY","deltaX","deltaY","down","moved","color","window","enableFluids","multipleSplats","parseInt","Math","random","pointers","splatStack","halfFloat","supportLinearFiltering","params","alpha","depth","stencil","antialias","preserveDrawingBuffer","gl","getContext","isWebGL2","getExtension","clearColor","formatRGBA","formatRG","formatR","halfFloatTexType","HALF_FLOAT","HALF_FLOAT_OES","getSupportedFormat","RGBA16F","RGBA","RG16F","RG","R16F","RED","ext","getWebGLContext","internalFormat","format","type","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","supportRenderTextureFormat","test","navigator","userAgent","Material","vertexShader","fragmentShaderSource","$e275771437fce67d2fc35e86006b044$var$_classCallCheck","programs","activeProgram","uniforms","keywords","hash","hashCode","program","fragmentShader","compileShader","FRAGMENT_SHADER","createProgram","getUniforms","useProgram","Program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformCount","ACTIVE_UNIFORMS","uniformName","getActiveUniform","name","getUniformLocation","source","keywordsString","forEach","keyword","addKeywords","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","dye","velocity","divergence","curl","pressure","bloom","sunrays","sunraysTemp","a","displayKeywords","baseVertexShader","VERTEX_SHADER","blurVertexShader","blurShader","copyShader","clearShader","colorShader","bloomPrefilterShader","bloomBlurShader","bloomFinalShader","sunraysMaskShader","sunraysShader","splatShader","advectionShader","divergenceShader","curlShader","vorticityShader","pressureShader","gradientSubtractShader","blit","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexAttribPointer","FLOAT","enableVertexAttribArray","destination","drawElements","TRIANGLES","UNSIGNED_SHORT","bloomFramebuffers","ditheringTexture","url","LINEAR","REPEAT","RGB","UNSIGNED_BYTE","Uint8Array","obj","width","height","attach","activeTexture","TEXTURE0","image","Image","onload","src","createTextureAsync","__esModule","default","blurProgram","copyProgram","clearProgram","colorProgram","bloomPrefilterProgram","bloomBlurProgram","bloomFinalProgram","sunraysMaskProgram","sunraysProgram","splatProgram","advectionProgram","divergenceProgram","curlProgram","vorticityProgram","pressureProgram","gradienSubtractProgram","displayMaterial","initFramebuffers","simRes","getResolution","dyeRes","texType","rgba","rg","filtering","createDoubleFBO","resizeDoubleFBO","createFBO","res","initBloomFramebuffers","initSunraysFramebuffers","w","h","param","viewport","clear","COLOR_BUFFER_BIT","texelSizeX","texelSizeY","fbo1","fbo2","read","value","write","swap","temp","target","newFBO","bind","uniform1i","uTexture","resizeFBO","setKeywords","lastUpdateTime","Date","now","colorUpdateTimer","scaleByPixelRatio","clientWidth","clientHeight","amount","generateColor","x","y","dx","dy","splat","updatePointerDownData","pointer","posX","posY","updatePointerMoveData","delta","aspectRatio","correctDeltaX","correctDeltaY","abs","resolution","drawingBufferWidth","drawingBufferHeight","min","round","max","input","floor","s","charCodeAt","update","dt","calcDeltaTime","range","p","updateColors","pop","applyInputs","disable","BLEND","uniform2f","texelSize","uVelocity","uCurl","uniform1f","uDivergence","uPressure","dyeTexelSize","velocityId","uSource","dissipation","step","last","knee","curve0","curve1","curve2","uniform3f","curve","threshold","dest","blendFunc","ONE","enable","baseTex","intensity","applyBloom","mask","weight","iterations","blur","ONE_MINUS_SRC_ALPHA","uniform4f","drawColor","uBloom","uDithering","scale","getTextureScale","ditherScale","uSunrays","drawDisplay","render","requestAnimationFrame","uTarget","point","radius","correctRadius","fluidsStartPointers","touches","identifier","fluidsMovePointers","c","v","f","q","t","HSVtoRGB"],"version":3,"file":"fluids.74c86f89.js.map","sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = require(\"@parcel/plugin\");\n\nvar _utils = require(\"@parcel/utils\");\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _nullthrows = _interopRequireDefault(require(\"nullthrows\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// List of browsers that support dynamic import natively\n// https://caniuse.com/#feat=es6-module-dynamic-import\nconst DYNAMIC_IMPORT_BROWSERS = {\n  edge: '76',\n  firefox: '67',\n  chrome: '63',\n  safari: '11.1',\n  opera: '50'\n};\nconst LOADERS = {\n  browser: {\n    css: './loaders/browser/css-loader',\n    html: './loaders/browser/html-loader',\n    js: './loaders/browser/js-loader',\n    wasm: './loaders/browser/wasm-loader',\n    IMPORT_POLYFILL: './loaders/browser/import-polyfill'\n  },\n  worker: {\n    js: './loaders/worker/js-loader',\n    wasm: './loaders/worker/wasm-loader',\n    IMPORT_POLYFILL: false\n  },\n  node: {\n    css: './loaders/node/css-loader',\n    html: './loaders/node/html-loader',\n    js: './loaders/node/js-loader',\n    wasm: './loaders/node/wasm-loader',\n    IMPORT_POLYFILL: null\n  }\n};\n\nfunction getLoaders(ctx) {\n  if (ctx.isWorker()) return LOADERS.worker;\n  if (ctx.isBrowser()) return LOADERS.browser;\n  if (ctx.isNode()) return LOADERS.node;\n  return null;\n}\n\nvar _default = new _plugin.Runtime({\n  apply({\n    bundle,\n    bundleGraph,\n    options\n  }) {\n    // Dependency ids in code replaced with referenced bundle names\n    // Loader runtime added for bundle groups that don't have a native loader (e.g. HTML/CSS/Worker - isURL?),\n    // and which are not loaded by a parent bundle.\n    // Loaders also added for modules that were moved to a separate bundle because they are a different type\n    // (e.g. WASM, HTML). These should be preloaded prior to the bundle being executed. Replace the entry asset(s)\n    // with the preload module.\n    if (bundle.type !== 'js') {\n      return;\n    }\n\n    let asyncDependencies = [];\n    let otherDependencies = [];\n    bundle.traverse(node => {\n      if (node.type !== 'dependency') {\n        return;\n      }\n\n      let dependency = node.value;\n\n      if (dependency.isAsync && !dependency.isURL) {\n        asyncDependencies.push(dependency);\n      } else {\n        otherDependencies.push(dependency);\n      }\n    });\n    let assets = [];\n\n    for (let dependency of asyncDependencies) {\n      let resolved = bundleGraph.resolveExternalDependency(dependency, bundle);\n\n      if (resolved == null) {\n        continue;\n      }\n\n      if (resolved.type === 'asset') {\n        // If this bundle already has the asset this dependency references,\n        // return a simple runtime of `Promise.resolve(require(\"path/to/asset\"))`.\n        assets.push({\n          filePath: _path.default.join(options.projectRoot, 'JSRuntime.js'),\n          // Using Promise['resolve'] to prevent Parcel from inferring this is an async dependency.\n          // TODO: Find a better way of doing this.\n          code: `module.exports = Promise['resolve'](require(${JSON.stringify('./' + _path.default.relative(options.projectRoot, resolved.value.filePath))}))`,\n          dependency\n        });\n      } else {\n        assets.push(...getLoaderRuntimes({\n          bundle,\n          dependency,\n          bundleGraph,\n          bundleGroup: resolved.value\n        }));\n      }\n    }\n\n    for (let dependency of otherDependencies) {\n      let resolved = bundleGraph.resolveExternalDependency(dependency, bundle);\n\n      if (dependency.isURL && resolved == null) {\n        // If a URL dependency was not able to be resolved, add a runtime that\n        // exports the original moduleSpecifier.\n        assets.push({\n          filePath: __filename,\n          code: `module.exports = ${JSON.stringify(dependency.moduleSpecifier)}`,\n          dependency\n        });\n        continue;\n      }\n\n      if (resolved == null || resolved.type !== 'bundle_group') {\n        continue;\n      }\n\n      let bundleGroup = resolved.value;\n      let mainBundle = (0, _nullthrows.default)(bundleGraph.getBundlesInBundleGroup(bundleGroup).find(b => {\n        let main = b.getMainEntry();\n        return main && bundleGroup.entryAssetId === main.id;\n      }));\n\n      if (mainBundle.isInline) {\n        assets.push({\n          filePath: _path.default.join(__dirname, `/bundles/${mainBundle.id}.js`),\n          code: `module.exports = ${JSON.stringify(dependency.id)};`,\n          dependency\n        });\n        continue;\n      } // URL dependency or not, fall back to including a runtime that exports the url\n\n\n      assets.push(getURLRuntime(dependency, bundle, mainBundle));\n    }\n\n    if (shouldUseRuntimeManifest(bundle) && bundleGraph.getChildBundles(bundle).length > 0 && isNewContext(bundle, bundleGraph)) {\n      assets.push({\n        filePath: __filename,\n        code: getRegisterCode(bundle, bundleGraph),\n        isEntry: true\n      });\n    }\n\n    return assets;\n  }\n\n});\n\nexports.default = _default;\n\nfunction getLoaderRuntimes({\n  bundle,\n  dependency,\n  bundleGroup,\n  bundleGraph\n}) {\n  let assets = []; // Sort so the bundles containing the entry asset appear last\n\n  let externalBundles = bundleGraph.getBundlesInBundleGroup(bundleGroup).filter(bundle => !bundle.isInline).sort(bundle => bundle.getEntryAssets().map(asset => asset.id).includes(bundleGroup.entryAssetId) ? 1 : -1); // CommonJS is a synchronous module system, so there is no need to load bundles in parallel.\n  // Importing of the other bundles will be handled by the bundle group entry.\n  // Do the same thing in library mode for ES modules, as we are building for another bundler\n  // and the imports for sibling bundles will be in the target bundle.\n\n  if (bundle.env.outputFormat === 'commonjs' || bundle.env.isLibrary) {\n    externalBundles = externalBundles.slice(-1);\n  }\n\n  let loaders = getLoaders(bundle.env); // Determine if we need to add a dynamic import() polyfill, or if all target browsers support it natively.\n\n  let needsDynamicImportPolyfill = false;\n\n  if (bundle.env.isBrowser() && bundle.env.outputFormat === 'esmodule') {\n    needsDynamicImportPolyfill = !bundle.env.matchesEngines(DYNAMIC_IMPORT_BROWSERS);\n  }\n\n  let loaderModules = loaders ? externalBundles.map(to => {\n    let loader = loaders[to.type];\n\n    if (!loader) {\n      return;\n    }\n\n    let relativePathExpr = getRelativePathExpr(bundle, to); // Use esmodule loader if possible\n\n    if (to.type === 'js' && to.env.outputFormat === 'esmodule') {\n      if (!needsDynamicImportPolyfill) {\n        return `import(\"./\" + ${relativePathExpr})`;\n      }\n\n      loader = (0, _nullthrows.default)(loaders.IMPORT_POLYFILL, `No import() polyfill available for context '${bundle.env.context}'`);\n    } else if (to.type === 'js' && to.env.outputFormat === 'commonjs') {\n      return `Promise.resolve(require(\"./\" + ${relativePathExpr}))`;\n    }\n\n    return `require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr})`;\n  }).filter(Boolean) : [];\n\n  if (loaderModules.length > 0) {\n    let loaders = loaderModules.join(', ');\n\n    if (loaderModules.length > 1 && (bundle.env.outputFormat === 'global' || !externalBundles.every(b => b.type === 'js'))) {\n      loaders = `Promise.all([${loaders}])`;\n\n      if (bundle.env.outputFormat !== 'global') {\n        loaders += `.then(r => r[r.length - 1])`;\n      }\n    } else {\n      loaders = `(${loaders})`;\n    }\n\n    if (bundle.env.outputFormat === 'global') {\n      loaders += `.then(() => parcelRequire('${bundleGroup.entryAssetId}')${// In global output with scope hoisting, functions return exports are\n      // always returned. Otherwise, the exports are returned.\n      bundle.env.scopeHoist ? '()' : ''})`;\n    }\n\n    assets.push({\n      filePath: __filename,\n      code: `module.exports = ${loaders};`,\n      dependency\n    });\n  }\n\n  return assets;\n}\n\nfunction isNewContext(bundle, bundleGraph) {\n  return bundle.isEntry || bundleGraph.getParentBundles(bundle).some(parent => parent.env.context !== bundle.env.context || parent.type !== 'js');\n}\n\nfunction getURLRuntime(dependency, from, to) {\n  let relativePathExpr = getRelativePathExpr(from, to);\n\n  if (dependency.meta.webworker === true) {\n    return {\n      filePath: __filename,\n      code: `module.exports = require('./get-worker-url')(${relativePathExpr});`,\n      dependency\n    };\n  }\n\n  return {\n    filePath: __filename,\n    code: `module.exports = require('./bundle-url').getBundleURL() + ${relativePathExpr}`,\n    dependency\n  };\n}\n\nfunction getRegisterCode(entryBundle, bundleGraph) {\n  let idToName = {};\n  bundleGraph.traverseBundles((bundle, _, actions) => {\n    if (bundle.isInline) {\n      return;\n    }\n\n    idToName[getPublicBundleId(bundle)] = (0, _nullthrows.default)(bundle.name);\n\n    if (bundle !== entryBundle && isNewContext(bundle, bundleGraph)) {\n      // New contexts have their own manifests, so there's no need to continue.\n      actions.skipChildren();\n    }\n  }, entryBundle);\n  return \"require('./bundle-manifest').register(JSON.parse(\" + JSON.stringify(JSON.stringify(idToName)) + '));';\n}\n\nfunction getRelativePathExpr(from, to) {\n  if (shouldUseRuntimeManifest(from)) {\n    return `require('./relative-path')(${JSON.stringify(getPublicBundleId(from))}, ${JSON.stringify(getPublicBundleId(to))})`;\n  }\n\n  return JSON.stringify((0, _utils.relativeBundlePath)(from, to, {\n    leadingDotSlash: false\n  }));\n}\n\nfunction shouldUseRuntimeManifest(bundle) {\n  let env = bundle.env;\n  return !env.isLibrary && env.outputFormat === 'global' && env.isBrowser();\n}\n\nfunction getPublicBundleId(bundle) {\n  return bundle.id.slice(-16);\n}","\"use strict\";\n\n/* globals document:readonly */\nvar bundleURL = null;\n\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  let matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","\"use strict\";\n\nvar resolve = require('./bundle-manifest').resolve;\n\nmodule.exports = function (fromId, toId) {\n  return relative(dirname(resolve(fromId)), resolve(toId));\n};\n\nfunction dirname(_filePath) {\n  if (_filePath === '') {\n    return '.';\n  }\n\n  var filePath = _filePath[_filePath.length - 1] === '/' ? _filePath.slice(0, _filePath.length - 1) : _filePath;\n  var slashIndex = filePath.lastIndexOf('/');\n  return slashIndex === -1 ? '.' : filePath.slice(0, slashIndex);\n}\n\nfunction relative(from, to) {\n  if (from === to) {\n    return '';\n  }\n\n  var fromParts = from.split('/');\n\n  if (fromParts[0] === '.') {\n    fromParts.shift();\n  }\n\n  var toParts = to.split('/');\n\n  if (toParts[0] === '.') {\n    toParts.shift();\n  } // Find where path segments diverge.\n\n\n  var i;\n  var divergeIndex;\n\n  for (i = 0; (i < toParts.length || i < fromParts.length) && divergeIndex == null; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      divergeIndex = i;\n    }\n  } // If there are segments from \"from\" beyond the point of divergence,\n  // return back up the path to that point using \"..\".\n\n\n  var parts = [];\n\n  for (i = 0; i < fromParts.length - divergeIndex; i++) {\n    parts.push('..');\n  } // If there are segments from \"to\" beyond the point of divergence,\n  // continue using the remaining segments.\n\n\n  if (toParts.length > divergeIndex) {\n    parts.push.apply(parts, toParts.slice(divergeIndex));\n  }\n\n  return parts.join('/');\n}\n\nmodule.exports._dirname = dirname;\nmodule.exports._relative = relative;","/*\r\nMIT License\r\n\r\nCopyright (c) 2017 Pavel Dobryakov\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\nimport LDR_TEXTURE_URL from 'url:/img/lcdm/LDR_LLL1_0.png';\r\n\r\n'use strict';\r\n\r\n// Simulation code\r\n\r\nconst canvas = document.querySelector('#cc');\r\nresizeCanvas();\r\n\r\nlet config = {\r\n    SIM_RESOLUTION: 128,\r\n    DYE_RESOLUTION: 1024,\r\n    CAPTURE_RESOLUTION: 512,\r\n    DENSITY_DISSIPATION: 1,\r\n    VELOCITY_DISSIPATION: 0.2,\r\n    PRESSURE: 0.8,\r\n    PRESSURE_ITERATIONS: 20,\r\n    CURL: 30,\r\n    SPLAT_RADIUS: 0.1,\r\n    SPLAT_FORCE: 6000,\r\n    SHADING: true,\r\n    COLORFUL: true,\r\n    COLOR_UPDATE_SPEED: 10,\r\n    PAUSED: true,\r\n    BACK_COLOR: { r: 10, g: 10, b: 10 },\r\n    TRANSPARENT: false,\r\n    BLOOM: true,\r\n    BLOOM_ITERATIONS: 2,\r\n    BLOOM_RESOLUTION: 256,\r\n    BLOOM_INTENSITY: 0.8,\r\n    BLOOM_THRESHOLD: 0.6,\r\n    BLOOM_SOFT_KNEE: 0.7,\r\n    SUNRAYS: true,\r\n    SUNRAYS_RESOLUTION: 196,\r\n    SUNRAYS_WEIGHT: 1.0,\r\n}\r\n\r\nwindow.enableFluids = function(){\r\n    config.PAUSED = false;\r\n    multipleSplats(parseInt(Math.random() * 20) + 5);\r\n};\r\n\r\nfunction pointerPrototype () {\r\n    this.id = -1;\r\n    this.texcoordX = 0;\r\n    this.texcoordY = 0;\r\n    this.prevTexcoordX = 0;\r\n    this.prevTexcoordY = 0;\r\n    this.deltaX = 0;\r\n    this.deltaY = 0;\r\n    this.down = false;\r\n    this.moved = false;\r\n    this.color = [30, 0, 300];\r\n}\r\n\r\nlet pointers = [];\r\nlet splatStack = [];\r\n\r\nconst { gl, ext } = getWebGLContext(canvas);\r\n\r\nif (isMobile()) {\r\n    config.DYE_RESOLUTION = 512;\r\n}\r\nif (!ext.supportLinearFiltering) {\r\n    config.DYE_RESOLUTION = 512;\r\n    config.SHADING = false;\r\n    config.BLOOM = false;\r\n    config.SUNRAYS = false;\r\n}\r\n\r\nfunction getWebGLContext (canvas) {\r\n    const params = { alpha: true, depth: false, stencil: false, antialias: false, preserveDrawingBuffer: false };\r\n\r\n    let gl = canvas.getContext('webgl2', params);\r\n    const isWebGL2 = !!gl;\r\n    if (!isWebGL2)\r\n        gl = canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params);\r\n\r\n    let halfFloat;\r\n    let supportLinearFiltering;\r\n    if (isWebGL2) {\r\n        gl.getExtension('EXT_color_buffer_float');\r\n        supportLinearFiltering = gl.getExtension('OES_texture_float_linear');\r\n    } else {\r\n        halfFloat = gl.getExtension('OES_texture_half_float');\r\n        supportLinearFiltering = gl.getExtension('OES_texture_half_float_linear');\r\n    }\r\n\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n\r\n    const halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat.HALF_FLOAT_OES;\r\n    let formatRGBA;\r\n    let formatRG;\r\n    let formatR;\r\n\r\n    if (isWebGL2)\r\n    {\r\n        formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);\r\n        formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\r\n        formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\r\n    }\r\n    else\r\n    {\r\n        formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\r\n        formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\r\n        formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\r\n    }\r\n\r\n    return {\r\n        gl,\r\n        ext: {\r\n            formatRGBA,\r\n            formatRG,\r\n            formatR,\r\n            halfFloatTexType,\r\n            supportLinearFiltering\r\n        }\r\n    };\r\n}\r\n\r\nfunction getSupportedFormat (gl, internalFormat, format, type)\r\n{\r\n    if (!supportRenderTextureFormat(gl, internalFormat, format, type))\r\n    {\r\n        switch (internalFormat)\r\n        {\r\n            case gl.R16F:\r\n                return getSupportedFormat(gl, gl.RG16F, gl.RG, type);\r\n            case gl.RG16F:\r\n                return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    return {\r\n        internalFormat,\r\n        format\r\n    }\r\n}\r\n\r\nfunction supportRenderTextureFormat (gl, internalFormat, format, type) {\r\n    let texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);\r\n\r\n    let fbo = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n    return status == gl.FRAMEBUFFER_COMPLETE;\r\n}\r\n\r\nfunction isMobile () {\r\n    return /Mobi|Android/i.test(navigator.userAgent);\r\n}\r\n\r\nclass Material {\r\n    constructor (vertexShader, fragmentShaderSource) {\r\n        this.vertexShader = vertexShader;\r\n        this.fragmentShaderSource = fragmentShaderSource;\r\n        this.programs = [];\r\n        this.activeProgram = null;\r\n        this.uniforms = [];\r\n    }\r\n\r\n    setKeywords (keywords) {\r\n        let hash = 0;\r\n        for (let i = 0; i < keywords.length; i++)\r\n            hash += hashCode(keywords[i]);\r\n\r\n        let program = this.programs[hash];\r\n        if (program == null)\r\n        {\r\n            let fragmentShader = compileShader(gl.FRAGMENT_SHADER, this.fragmentShaderSource, keywords);\r\n            program = createProgram(this.vertexShader, fragmentShader);\r\n            this.programs[hash] = program;\r\n        }\r\n\r\n        if (program == this.activeProgram) return;\r\n\r\n        this.uniforms = getUniforms(program);\r\n        this.activeProgram = program;\r\n    }\r\n\r\n    bind () {\r\n        gl.useProgram(this.activeProgram);\r\n    }\r\n}\r\n\r\nclass Program {\r\n    constructor (vertexShader, fragmentShader) {\r\n        this.uniforms = {};\r\n        this.program = createProgram(vertexShader, fragmentShader);\r\n        this.uniforms = getUniforms(this.program);\r\n    }\r\n\r\n    bind () {\r\n        gl.useProgram(this.program);\r\n    }\r\n}\r\n\r\nfunction createProgram (vertexShader, fragmentShader) {\r\n    let program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\r\n        throw gl.getProgramInfoLog(program);\r\n\r\n    return program;\r\n}\r\n\r\nfunction getUniforms (program) {\r\n    let uniforms = [];\r\n    let uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n    for (let i = 0; i < uniformCount; i++) {\r\n        let uniformName = gl.getActiveUniform(program, i).name;\r\n        uniforms[uniformName] = gl.getUniformLocation(program, uniformName);\r\n    }\r\n    return uniforms;\r\n}\r\n\r\nfunction compileShader (type, source, keywords) {\r\n    source = addKeywords(source, keywords);\r\n\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\r\n        throw gl.getShaderInfoLog(shader);\r\n\r\n    return shader;\r\n};\r\n\r\nfunction addKeywords (source, keywords) {\r\n    if (keywords == null) return source;\r\n    let keywordsString = '';\r\n    keywords.forEach(keyword => {\r\n        keywordsString += '#define ' + keyword + '\\n';\r\n    });\r\n    return keywordsString + source;\r\n}\r\n\r\nconst baseVertexShader = compileShader(gl.VERTEX_SHADER, `\r\n    precision highp float;\r\n\r\n    attribute vec2 aPosition;\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform vec2 texelSize;\r\n\r\n    void main () {\r\n        vUv = aPosition * 0.5 + 0.5;\r\n        vL = vUv - vec2(texelSize.x, 0.0);\r\n        vR = vUv + vec2(texelSize.x, 0.0);\r\n        vT = vUv + vec2(0.0, texelSize.y);\r\n        vB = vUv - vec2(0.0, texelSize.y);\r\n        gl_Position = vec4(aPosition, 0.0, 1.0);\r\n    }\r\n`);\r\n\r\nconst blurVertexShader = compileShader(gl.VERTEX_SHADER, `\r\n    precision highp float;\r\n\r\n    attribute vec2 aPosition;\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    uniform vec2 texelSize;\r\n\r\n    void main () {\r\n        vUv = aPosition * 0.5 + 0.5;\r\n        float offset = 1.33333333;\r\n        vL = vUv - texelSize * offset;\r\n        vR = vUv + texelSize * offset;\r\n        gl_Position = vec4(aPosition, 0.0, 1.0);\r\n    }\r\n`);\r\n\r\nconst blurShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\r\n        sum += texture2D(uTexture, vL) * 0.35294117;\r\n        sum += texture2D(uTexture, vR) * 0.35294117;\r\n        gl_FragColor = sum;\r\n    }\r\n`);\r\n\r\nconst copyShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        gl_FragColor = texture2D(uTexture, vUv);\r\n    }\r\n`);\r\n\r\nconst clearShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform float value;\r\n\r\n    void main () {\r\n        gl_FragColor = value * texture2D(uTexture, vUv);\r\n    }\r\n`);\r\n\r\nconst colorShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n\r\n    uniform vec4 color;\r\n\r\n    void main () {\r\n        gl_FragColor = color;\r\n    }\r\n`);\r\n\r\nconst displayShaderSource = `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uTexture;\r\n    uniform sampler2D uBloom;\r\n    uniform sampler2D uSunrays;\r\n    uniform sampler2D uDithering;\r\n    uniform vec2 ditherScale;\r\n    uniform vec2 texelSize;\r\n\r\n    vec3 linearToGamma (vec3 color) {\r\n        color = max(color, vec3(0));\r\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\r\n    }\r\n\r\n    void main () {\r\n        vec3 c = texture2D(uTexture, vUv).rgb;\r\n\r\n    #ifdef SHADING\r\n        vec3 lc = texture2D(uTexture, vL).rgb;\r\n        vec3 rc = texture2D(uTexture, vR).rgb;\r\n        vec3 tc = texture2D(uTexture, vT).rgb;\r\n        vec3 bc = texture2D(uTexture, vB).rgb;\r\n\r\n        float dx = length(rc) - length(lc);\r\n        float dy = length(tc) - length(bc);\r\n\r\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\r\n        vec3 l = vec3(0.0, 0.0, 1.0);\r\n\r\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\r\n        c *= diffuse;\r\n    #endif\r\n\r\n    #ifdef BLOOM\r\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\r\n    #endif\r\n\r\n    #ifdef SUNRAYS\r\n        float sunrays = texture2D(uSunrays, vUv).r;\r\n        c *= sunrays;\r\n    #ifdef BLOOM\r\n        bloom *= sunrays;\r\n    #endif\r\n    #endif\r\n\r\n    #ifdef BLOOM\r\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\r\n        noise = noise * 2.0 - 1.0;\r\n        bloom += noise / 255.0;\r\n        bloom = linearToGamma(bloom);\r\n        c += bloom;\r\n    #endif\r\n\r\n        float a = max(c.r, max(c.g, c.b));\r\n        gl_FragColor = vec4(c, a);\r\n    }\r\n`;\r\n\r\nconst bloomPrefilterShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform vec3 curve;\r\n    uniform float threshold;\r\n\r\n    void main () {\r\n        vec3 c = texture2D(uTexture, vUv).rgb;\r\n        float br = max(c.r, max(c.g, c.b));\r\n        float rq = clamp(br - curve.x, 0.0, curve.y);\r\n        rq = curve.z * rq * rq;\r\n        c *= max(rq, br - threshold) / max(br, 0.0001);\r\n        gl_FragColor = vec4(c, 0.0);\r\n    }\r\n`);\r\n\r\nconst bloomBlurShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        vec4 sum = vec4(0.0);\r\n        sum += texture2D(uTexture, vL);\r\n        sum += texture2D(uTexture, vR);\r\n        sum += texture2D(uTexture, vT);\r\n        sum += texture2D(uTexture, vB);\r\n        sum *= 0.25;\r\n        gl_FragColor = sum;\r\n    }\r\n`);\r\n\r\nconst bloomFinalShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uTexture;\r\n    uniform float intensity;\r\n\r\n    void main () {\r\n        vec4 sum = vec4(0.0);\r\n        sum += texture2D(uTexture, vL);\r\n        sum += texture2D(uTexture, vR);\r\n        sum += texture2D(uTexture, vT);\r\n        sum += texture2D(uTexture, vB);\r\n        sum *= 0.25;\r\n        gl_FragColor = sum * intensity;\r\n    }\r\n`);\r\n\r\nconst sunraysMaskShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        vec4 c = texture2D(uTexture, vUv);\r\n        float br = max(c.r, max(c.g, c.b));\r\n        c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\r\n        gl_FragColor = c;\r\n    }\r\n`);\r\n\r\nconst sunraysShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform float weight;\r\n\r\n    #define ITERATIONS 16\r\n\r\n    void main () {\r\n        float Density = 0.3;\r\n        float Decay = 0.95;\r\n        float Exposure = 0.7;\r\n\r\n        vec2 coord = vUv;\r\n        vec2 dir = vUv - 0.5;\r\n\r\n        dir *= 1.0 / float(ITERATIONS) * Density;\r\n        float illuminationDecay = 1.0;\r\n\r\n        float color = texture2D(uTexture, vUv).a;\r\n\r\n        for (int i = 0; i < ITERATIONS; i++)\r\n        {\r\n            coord -= dir;\r\n            float col = texture2D(uTexture, coord).a;\r\n            color += col * illuminationDecay * weight;\r\n            illuminationDecay *= Decay;\r\n        }\r\n\r\n        gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\r\n    }\r\n`);\r\n\r\nconst splatShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTarget;\r\n    uniform float aspectRatio;\r\n    uniform vec3 color;\r\n    uniform vec2 point;\r\n    uniform float radius;\r\n\r\n    void main () {\r\n        vec2 p = vUv - point.xy;\r\n        p.x *= aspectRatio;\r\n        vec3 splat = exp(-dot(p, p) / radius) * color;\r\n        vec3 base = texture2D(uTarget, vUv).xyz;\r\n        gl_FragColor = vec4(base + splat, 1.0);\r\n    }\r\n`);\r\n\r\nconst advectionShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uVelocity;\r\n    uniform sampler2D uSource;\r\n    uniform vec2 texelSize;\r\n    uniform vec2 dyeTexelSize;\r\n    uniform float dt;\r\n    uniform float dissipation;\r\n\r\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\r\n        vec2 st = uv / tsize - 0.5;\r\n\r\n        vec2 iuv = floor(st);\r\n        vec2 fuv = fract(st);\r\n\r\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\r\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\r\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\r\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\r\n\r\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\r\n    }\r\n\r\n    void main () {\r\n    #ifdef MANUAL_FILTERING\r\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\r\n        vec4 result = bilerp(uSource, coord, dyeTexelSize);\r\n    #else\r\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\r\n        vec4 result = texture2D(uSource, coord);\r\n    #endif\r\n        float decay = 1.0 + dissipation * dt;\r\n        gl_FragColor = result / decay;\r\n    }`,\r\n    ext.supportLinearFiltering ? null : ['MANUAL_FILTERING']\r\n);\r\n\r\nconst divergenceShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uVelocity;\r\n\r\n    void main () {\r\n        float L = texture2D(uVelocity, vL).x;\r\n        float R = texture2D(uVelocity, vR).x;\r\n        float T = texture2D(uVelocity, vT).y;\r\n        float B = texture2D(uVelocity, vB).y;\r\n\r\n        vec2 C = texture2D(uVelocity, vUv).xy;\r\n        if (vL.x < 0.0) { L = -C.x; }\r\n        if (vR.x > 1.0) { R = -C.x; }\r\n        if (vT.y > 1.0) { T = -C.y; }\r\n        if (vB.y < 0.0) { B = -C.y; }\r\n\r\n        float div = 0.5 * (R - L + T - B);\r\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\r\n    }\r\n`);\r\n\r\nconst curlShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uVelocity;\r\n\r\n    void main () {\r\n        float L = texture2D(uVelocity, vL).y;\r\n        float R = texture2D(uVelocity, vR).y;\r\n        float T = texture2D(uVelocity, vT).x;\r\n        float B = texture2D(uVelocity, vB).x;\r\n        float vorticity = R - L - T + B;\r\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\r\n    }\r\n`);\r\n\r\nconst vorticityShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uVelocity;\r\n    uniform sampler2D uCurl;\r\n    uniform float curl;\r\n    uniform float dt;\r\n\r\n    void main () {\r\n        float L = texture2D(uCurl, vL).x;\r\n        float R = texture2D(uCurl, vR).x;\r\n        float T = texture2D(uCurl, vT).x;\r\n        float B = texture2D(uCurl, vB).x;\r\n        float C = texture2D(uCurl, vUv).x;\r\n\r\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\r\n        force /= length(force) + 0.0001;\r\n        force *= curl * C;\r\n        force.y *= -1.0;\r\n\r\n        vec2 vel = texture2D(uVelocity, vUv).xy;\r\n        gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\r\n    }\r\n`);\r\n\r\nconst pressureShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uPressure;\r\n    uniform sampler2D uDivergence;\r\n\r\n    void main () {\r\n        float L = texture2D(uPressure, vL).x;\r\n        float R = texture2D(uPressure, vR).x;\r\n        float T = texture2D(uPressure, vT).x;\r\n        float B = texture2D(uPressure, vB).x;\r\n        float C = texture2D(uPressure, vUv).x;\r\n        float divergence = texture2D(uDivergence, vUv).x;\r\n        float pressure = (L + R + B + T - divergence) * 0.25;\r\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\r\n    }\r\n`);\r\n\r\nconst gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uPressure;\r\n    uniform sampler2D uVelocity;\r\n\r\n    void main () {\r\n        float L = texture2D(uPressure, vL).x;\r\n        float R = texture2D(uPressure, vR).x;\r\n        float T = texture2D(uPressure, vT).x;\r\n        float B = texture2D(uPressure, vB).x;\r\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\r\n        velocity.xy -= vec2(R - L, T - B);\r\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\r\n    }\r\n`);\r\n\r\nconst blit = (() => {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW);\r\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\r\n    gl.enableVertexAttribArray(0);\r\n\r\n    return (destination) => {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, destination);\r\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n})();\r\n\r\nlet dye;\r\nlet velocity;\r\nlet divergence;\r\nlet curl;\r\nlet pressure;\r\nlet bloom;\r\nlet bloomFramebuffers = [];\r\nlet sunrays;\r\nlet sunraysTemp;\r\n\r\nlet ditheringTexture = createTextureAsync(LDR_TEXTURE_URL);\r\n\r\nconst blurProgram            = new Program(blurVertexShader, blurShader);\r\nconst copyProgram            = new Program(baseVertexShader, copyShader);\r\nconst clearProgram           = new Program(baseVertexShader, clearShader);\r\nconst colorProgram           = new Program(baseVertexShader, colorShader);\r\nconst bloomPrefilterProgram  = new Program(baseVertexShader, bloomPrefilterShader);\r\nconst bloomBlurProgram       = new Program(baseVertexShader, bloomBlurShader);\r\nconst bloomFinalProgram      = new Program(baseVertexShader, bloomFinalShader);\r\nconst sunraysMaskProgram     = new Program(baseVertexShader, sunraysMaskShader);\r\nconst sunraysProgram         = new Program(baseVertexShader, sunraysShader);\r\nconst splatProgram           = new Program(baseVertexShader, splatShader);\r\nconst advectionProgram       = new Program(baseVertexShader, advectionShader);\r\nconst divergenceProgram      = new Program(baseVertexShader, divergenceShader);\r\nconst curlProgram            = new Program(baseVertexShader, curlShader);\r\nconst vorticityProgram       = new Program(baseVertexShader, vorticityShader);\r\nconst pressureProgram        = new Program(baseVertexShader, pressureShader);\r\nconst gradienSubtractProgram = new Program(baseVertexShader, gradientSubtractShader);\r\n\r\nconst displayMaterial = new Material(baseVertexShader, displayShaderSource);\r\n\r\nfunction initFramebuffers () {\r\n    let simRes = getResolution(config.SIM_RESOLUTION);\r\n    let dyeRes = getResolution(config.DYE_RESOLUTION);\r\n\r\n    const texType = ext.halfFloatTexType;\r\n    const rgba    = ext.formatRGBA;\r\n    const rg      = ext.formatRG;\r\n    const r       = ext.formatR;\r\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\r\n\r\n    if (dye == null)\r\n        dye = createDoubleFBO(dyeRes.width, dyeRes.height, rgba.internalFormat, rgba.format, texType, filtering);\r\n    else\r\n        dye = resizeDoubleFBO(dye, dyeRes.width, dyeRes.height, rgba.internalFormat, rgba.format, texType, filtering);\r\n\r\n    if (velocity == null)\r\n        velocity = createDoubleFBO(simRes.width, simRes.height, rg.internalFormat, rg.format, texType, filtering);\r\n    else\r\n        velocity = resizeDoubleFBO(velocity, simRes.width, simRes.height, rg.internalFormat, rg.format, texType, filtering);\r\n\r\n    divergence = createFBO      (simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\r\n    curl       = createFBO      (simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\r\n    pressure   = createDoubleFBO(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\r\n\r\n    initBloomFramebuffers();\r\n    initSunraysFramebuffers();\r\n}\r\n\r\nfunction initBloomFramebuffers () {\r\n    let res = getResolution(config.BLOOM_RESOLUTION);\r\n\r\n    const texType = ext.halfFloatTexType;\r\n    const rgba = ext.formatRGBA;\r\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\r\n\r\n    bloom = createFBO(res.width, res.height, rgba.internalFormat, rgba.format, texType, filtering);\r\n\r\n    bloomFramebuffers.length = 0;\r\n    for (let i = 0; i < config.BLOOM_ITERATIONS; i++)\r\n    {\r\n        let width = res.width >> (i + 1);\r\n        let height = res.height >> (i + 1);\r\n\r\n        if (width < 2 || height < 2) break;\r\n\r\n        let fbo = createFBO(width, height, rgba.internalFormat, rgba.format, texType, filtering);\r\n        bloomFramebuffers.push(fbo);\r\n    }\r\n}\r\n\r\nfunction initSunraysFramebuffers () {\r\n    let res = getResolution(config.SUNRAYS_RESOLUTION);\r\n\r\n    const texType = ext.halfFloatTexType;\r\n    const r = ext.formatR;\r\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\r\n\r\n    sunrays     = createFBO(res.width, res.height, r.internalFormat, r.format, texType, filtering);\r\n    sunraysTemp = createFBO(res.width, res.height, r.internalFormat, r.format, texType, filtering);\r\n}\r\n\r\nfunction createFBO (w, h, internalFormat, format, type, param) {\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    let texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);\r\n\r\n    let fbo = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    gl.viewport(0, 0, w, h);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    let texelSizeX = 1.0 / w;\r\n    let texelSizeY = 1.0 / h;\r\n\r\n    return {\r\n        texture,\r\n        fbo,\r\n        width: w,\r\n        height: h,\r\n        texelSizeX,\r\n        texelSizeY,\r\n        attach (id) {\r\n            gl.activeTexture(gl.TEXTURE0 + id);\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            return id;\r\n        }\r\n    };\r\n}\r\n\r\nfunction createDoubleFBO (w, h, internalFormat, format, type, param) {\r\n    let fbo1 = createFBO(w, h, internalFormat, format, type, param);\r\n    let fbo2 = createFBO(w, h, internalFormat, format, type, param);\r\n\r\n    return {\r\n        width: w,\r\n        height: h,\r\n        texelSizeX: fbo1.texelSizeX,\r\n        texelSizeY: fbo1.texelSizeY,\r\n        get read () {\r\n            return fbo1;\r\n        },\r\n        set read (value) {\r\n            fbo1 = value;\r\n        },\r\n        get write () {\r\n            return fbo2;\r\n        },\r\n        set write (value) {\r\n            fbo2 = value;\r\n        },\r\n        swap () {\r\n            let temp = fbo1;\r\n            fbo1 = fbo2;\r\n            fbo2 = temp;\r\n        }\r\n    }\r\n}\r\n\r\nfunction resizeFBO (target, w, h, internalFormat, format, type, param) {\r\n    let newFBO = createFBO(w, h, internalFormat, format, type, param);\r\n    copyProgram.bind();\r\n    gl.uniform1i(copyProgram.uniforms.uTexture, target.attach(0));\r\n    blit(newFBO.fbo);\r\n    return newFBO;\r\n}\r\n\r\nfunction resizeDoubleFBO (target, w, h, internalFormat, format, type, param) {\r\n    if (target.width == w && target.height == h)\r\n        return target;\r\n    target.read = resizeFBO(target.read, w, h, internalFormat, format, type, param);\r\n    target.write = createFBO(w, h, internalFormat, format, type, param);\r\n    target.width = w;\r\n    target.height = h;\r\n    target.texelSizeX = 1.0 / w;\r\n    target.texelSizeY = 1.0 / h;\r\n    return target;\r\n}\r\n\r\nfunction createTextureAsync (url) {\r\n    let texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255]));\r\n\r\n    let obj = {\r\n        texture,\r\n        width: 1,\r\n        height: 1,\r\n        attach (id) {\r\n            gl.activeTexture(gl.TEXTURE0 + id);\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            return id;\r\n        }\r\n    };\r\n\r\n    let image = new Image();\r\n    image.onload = () => {\r\n        obj.width = image.width;\r\n        obj.height = image.height;\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\r\n    };\r\n    image.src = url;\r\n\r\n    return obj;\r\n}\r\n\r\nfunction updateKeywords () {\r\n    let displayKeywords = [];\r\n    if (config.SHADING) displayKeywords.push(\"SHADING\");\r\n    if (config.BLOOM) displayKeywords.push(\"BLOOM\");\r\n    if (config.SUNRAYS) displayKeywords.push(\"SUNRAYS\");\r\n    displayMaterial.setKeywords(displayKeywords);\r\n}\r\n\r\nupdateKeywords();\r\ninitFramebuffers();\r\n\r\nlet lastUpdateTime = Date.now();\r\nlet colorUpdateTimer = 0.0;\r\nupdate();\r\n\r\nfunction update () {\r\n    const dt = calcDeltaTime();\r\n    if (resizeCanvas())\r\n        initFramebuffers();\r\n    updateColors(dt);\r\n\r\n    if (!config.PAUSED) {\r\n        applyInputs();\r\n        step(dt);\r\n    }\r\n    render(null);\r\n    requestAnimationFrame(update);\r\n}\r\n\r\nfunction calcDeltaTime () {\r\n    let now = Date.now();\r\n    let dt = (now - lastUpdateTime) / 1000;\r\n    dt = Math.min(dt, 0.016666);\r\n    lastUpdateTime = now;\r\n    return dt;\r\n}\r\n\r\nfunction resizeCanvas () {\r\n    let width = scaleByPixelRatio(canvas.clientWidth);\r\n    let height = scaleByPixelRatio(canvas.clientHeight);\r\n    if (canvas.width != width || canvas.height != height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction updateColors (dt) {\r\n    if (!config.COLORFUL) return;\r\n\r\n    colorUpdateTimer += dt * config.COLOR_UPDATE_SPEED;\r\n    if (colorUpdateTimer >= 1) {\r\n        colorUpdateTimer = wrap(colorUpdateTimer, 0, 1);\r\n        pointers.forEach(p => {\r\n            p.color = generateColor();\r\n        });\r\n    }\r\n}\r\n\r\nfunction applyInputs () {\r\n    if (splatStack.length > 0)\r\n        multipleSplats(splatStack.pop());\r\n\r\n    pointers.forEach(p => {\r\n        if (p.moved) {\r\n            p.moved = false;\r\n            splatPointer(p);\r\n        }\r\n    });\r\n}\r\n\r\nfunction step (dt) {\r\n    gl.disable(gl.BLEND);\r\n    gl.viewport(0, 0, velocity.width, velocity.height);\r\n\r\n    curlProgram.bind();\r\n    gl.uniform2f(curlProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n    gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n    blit(curl.fbo);\r\n\r\n    vorticityProgram.bind();\r\n    gl.uniform2f(vorticityProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n    gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n    gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1));\r\n    gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);\r\n    gl.uniform1f(vorticityProgram.uniforms.dt, dt);\r\n    blit(velocity.write.fbo);\r\n    velocity.swap();\r\n\r\n    divergenceProgram.bind();\r\n    gl.uniform2f(divergenceProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n    gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n    blit(divergence.fbo);\r\n\r\n    clearProgram.bind();\r\n    gl.uniform1i(clearProgram.uniforms.uTexture, pressure.read.attach(0));\r\n    gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE);\r\n    blit(pressure.write.fbo);\r\n    pressure.swap();\r\n\r\n    pressureProgram.bind();\r\n    gl.uniform2f(pressureProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n    gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0));\r\n    for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {\r\n        gl.uniform1i(pressureProgram.uniforms.uPressure, pressure.read.attach(1));\r\n        blit(pressure.write.fbo);\r\n        pressure.swap();\r\n    }\r\n\r\n    gradienSubtractProgram.bind();\r\n    gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n    gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.read.attach(0));\r\n    gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.read.attach(1));\r\n    blit(velocity.write.fbo);\r\n    velocity.swap();\r\n\r\n    advectionProgram.bind();\r\n    gl.uniform2f(advectionProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n    if (!ext.supportLinearFiltering)\r\n        gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n    let velocityId = velocity.read.attach(0);\r\n    gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId);\r\n    gl.uniform1i(advectionProgram.uniforms.uSource, velocityId);\r\n    gl.uniform1f(advectionProgram.uniforms.dt, dt);\r\n    gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);\r\n    blit(velocity.write.fbo);\r\n    velocity.swap();\r\n\r\n    gl.viewport(0, 0, dye.width, dye.height);\r\n\r\n    if (!ext.supportLinearFiltering)\r\n        gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, dye.texelSizeX, dye.texelSizeY);\r\n    gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n    gl.uniform1i(advectionProgram.uniforms.uSource, dye.read.attach(1));\r\n    gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);\r\n    blit(dye.write.fbo);\r\n    dye.swap();\r\n}\r\n\r\nfunction render (target) {\r\n    if (config.BLOOM)\r\n        applyBloom(dye.read, bloom);\r\n    if (config.SUNRAYS) {\r\n        applySunrays(dye.read, dye.write, sunrays);\r\n        blur(sunrays, sunraysTemp, 1);\r\n    }\r\n\r\n    if (target == null || !config.TRANSPARENT) {\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.enable(gl.BLEND);\r\n    }\r\n    else {\r\n        gl.disable(gl.BLEND);\r\n    }\r\n\r\n    let width = target == null ? gl.drawingBufferWidth : target.width;\r\n    let height = target == null ? gl.drawingBufferHeight : target.height;\r\n    gl.viewport(0, 0, width, height);\r\n\r\n    let fbo = target == null ? null : target.fbo;\r\n    drawColor(fbo, normalizeColor(config.BACK_COLOR));\r\n    drawDisplay(fbo, width, height);\r\n}\r\n\r\nfunction drawColor (fbo, color) {\r\n    colorProgram.bind();\r\n    gl.uniform4f(colorProgram.uniforms.color, color.r, color.g, color.b, 1);\r\n    blit(fbo);\r\n}\r\n\r\nfunction drawDisplay (fbo, width, height) {\r\n    displayMaterial.bind();\r\n    if (config.SHADING)\r\n        gl.uniform2f(displayMaterial.uniforms.texelSize, 1.0 / width, 1.0 / height);\r\n    gl.uniform1i(displayMaterial.uniforms.uTexture, dye.read.attach(0));\r\n    if (config.BLOOM) {\r\n        gl.uniform1i(displayMaterial.uniforms.uBloom, bloom.attach(1));\r\n        gl.uniform1i(displayMaterial.uniforms.uDithering, ditheringTexture.attach(2));\r\n        let scale = getTextureScale(ditheringTexture, width, height);\r\n        gl.uniform2f(displayMaterial.uniforms.ditherScale, scale.x, scale.y);\r\n    }\r\n    if (config.SUNRAYS)\r\n        gl.uniform1i(displayMaterial.uniforms.uSunrays, sunrays.attach(3));\r\n    blit(fbo);\r\n}\r\n\r\nfunction applyBloom (source, destination) {\r\n    if (bloomFramebuffers.length < 2)\r\n        return;\r\n\r\n    let last = destination;\r\n\r\n    gl.disable(gl.BLEND);\r\n    bloomPrefilterProgram.bind();\r\n    let knee = config.BLOOM_THRESHOLD * config.BLOOM_SOFT_KNEE + 0.0001;\r\n    let curve0 = config.BLOOM_THRESHOLD - knee;\r\n    let curve1 = knee * 2;\r\n    let curve2 = 0.25 / knee;\r\n    gl.uniform3f(bloomPrefilterProgram.uniforms.curve, curve0, curve1, curve2);\r\n    gl.uniform1f(bloomPrefilterProgram.uniforms.threshold, config.BLOOM_THRESHOLD);\r\n    gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, source.attach(0));\r\n    gl.viewport(0, 0, last.width, last.height);\r\n    blit(last.fbo);\r\n\r\n    bloomBlurProgram.bind();\r\n    for (let i = 0; i < bloomFramebuffers.length; i++) {\r\n        let dest = bloomFramebuffers[i];\r\n        gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\r\n        gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\r\n        gl.viewport(0, 0, dest.width, dest.height);\r\n        blit(dest.fbo);\r\n        last = dest;\r\n    }\r\n\r\n    gl.blendFunc(gl.ONE, gl.ONE);\r\n    gl.enable(gl.BLEND);\r\n\r\n    for (let i = bloomFramebuffers.length - 2; i >= 0; i--) {\r\n        let baseTex = bloomFramebuffers[i];\r\n        gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\r\n        gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\r\n        gl.viewport(0, 0, baseTex.width, baseTex.height);\r\n        blit(baseTex.fbo);\r\n        last = baseTex;\r\n    }\r\n\r\n    gl.disable(gl.BLEND);\r\n    bloomFinalProgram.bind();\r\n    gl.uniform2f(bloomFinalProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\r\n    gl.uniform1i(bloomFinalProgram.uniforms.uTexture, last.attach(0));\r\n    gl.uniform1f(bloomFinalProgram.uniforms.intensity, config.BLOOM_INTENSITY);\r\n    gl.viewport(0, 0, destination.width, destination.height);\r\n    blit(destination.fbo);\r\n}\r\n\r\nfunction applySunrays (source, mask, destination) {\r\n    gl.disable(gl.BLEND);\r\n    sunraysMaskProgram.bind();\r\n    gl.uniform1i(sunraysMaskProgram.uniforms.uTexture, source.attach(0));\r\n    gl.viewport(0, 0, mask.width, mask.height);\r\n    blit(mask.fbo);\r\n\r\n    sunraysProgram.bind();\r\n    gl.uniform1f(sunraysProgram.uniforms.weight, config.SUNRAYS_WEIGHT);\r\n    gl.uniform1i(sunraysProgram.uniforms.uTexture, mask.attach(0));\r\n    gl.viewport(0, 0, destination.width, destination.height);\r\n    blit(destination.fbo);\r\n}\r\n\r\nfunction blur (target, temp, iterations) {\r\n    blurProgram.bind();\r\n    for (let i = 0; i < iterations; i++) {\r\n        gl.uniform2f(blurProgram.uniforms.texelSize, target.texelSizeX, 0.0);\r\n        gl.uniform1i(blurProgram.uniforms.uTexture, target.attach(0));\r\n        blit(temp.fbo);\r\n\r\n        gl.uniform2f(blurProgram.uniforms.texelSize, 0.0, target.texelSizeY);\r\n        gl.uniform1i(blurProgram.uniforms.uTexture, temp.attach(0));\r\n        blit(target.fbo);\r\n    }\r\n}\r\n\r\nfunction splatPointer (pointer) {\r\n    let dx = pointer.deltaX * config.SPLAT_FORCE;\r\n    let dy = pointer.deltaY * config.SPLAT_FORCE;\r\n    splat(pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);\r\n}\r\n\r\nfunction multipleSplats (amount) {\r\n    for (let i = 0; i < amount; i++) {\r\n        const color = generateColor();\r\n        color.r *= 10.0;\r\n        color.g *= 10.0;\r\n        color.b *= 10.0;\r\n        const x = Math.random();\r\n        const y = Math.random();\r\n        const dx = 1000 * (Math.random() - 0.5);\r\n        const dy = 1000 * (Math.random() - 0.5);\r\n        splat(x, y, dx, dy, color);\r\n    }\r\n}\r\n\r\nwindow.splat = function splat (x, y, dx, dy, color) {\r\n    gl.viewport(0, 0, velocity.width, velocity.height);\r\n    splatProgram.bind();\r\n    gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.attach(0));\r\n    gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);\r\n    gl.uniform2f(splatProgram.uniforms.point, x, y);\r\n    gl.uniform3f(splatProgram.uniforms.color, dx, dy, 0.0);\r\n    gl.uniform1f(splatProgram.uniforms.radius, correctRadius(config.SPLAT_RADIUS / 100.0));\r\n    blit(velocity.write.fbo);\r\n    velocity.swap();\r\n\r\n    gl.viewport(0, 0, dye.width, dye.height);\r\n    gl.uniform1i(splatProgram.uniforms.uTarget, dye.read.attach(0));\r\n    gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);\r\n    blit(dye.write.fbo);\r\n    dye.swap();\r\n}\r\n\r\nfunction correctRadius (radius) {\r\n    let aspectRatio = canvas.width / canvas.height;\r\n    if (aspectRatio > 1)\r\n        radius *= aspectRatio;\r\n    return radius;\r\n}\r\n\r\nwindow.fluidsStartPointers = touches => {\r\n    while (touches.length >= pointers.length)\r\n        pointers.push(new pointerPrototype());\r\n\r\n    for (let i = 0; i < touches.length; i++) {\r\n        let posX = touches[i].x;\r\n        let posY = touches[i].y;\r\n        updatePointerDownData(pointers[i], touches[i].identifier, posX, posY);\r\n    }\r\n}\r\n\r\nwindow.fluidsMovePointers = touches => {\r\n    for (let i = 0; i < touches.length; i++) {\r\n        const pointer = pointers[i];\r\n        if (!pointer.down) continue;\r\n        let posX = touches[i].x;\r\n        let posY = touches[i].y;\r\n        updatePointerMoveData(pointer, posX, posY);\r\n    }\r\n}\r\n\r\nfunction updatePointerDownData (pointer, id, posX, posY) {\r\n    pointer.id = id;\r\n    pointer.down = true;\r\n    pointer.moved = false;\r\n    pointer.texcoordX = posX / canvas.width;\r\n    pointer.texcoordY = posY / canvas.height;\r\n    pointer.prevTexcoordX = pointer.texcoordX;\r\n    pointer.prevTexcoordY = pointer.texcoordY;\r\n    pointer.deltaX = 0;\r\n    pointer.deltaY = 0;\r\n    pointer.color = generateColor();\r\n}\r\n\r\nfunction updatePointerMoveData (pointer, posX, posY) {\r\n    pointer.prevTexcoordX = pointer.texcoordX;\r\n    pointer.prevTexcoordY = pointer.texcoordY;\r\n    pointer.texcoordX = posX / canvas.width;\r\n    pointer.texcoordY = posY / canvas.height;\r\n    pointer.deltaX = correctDeltaX(pointer.texcoordX - pointer.prevTexcoordX);\r\n    pointer.deltaY = correctDeltaY(pointer.texcoordY - pointer.prevTexcoordY);\r\n    pointer.moved = Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;\r\n}\r\n\r\nfunction updatePointerUpData (pointer) {\r\n    pointer.down = false;\r\n}\r\n\r\nfunction correctDeltaX (delta) {\r\n    let aspectRatio = canvas.width / canvas.height;\r\n    if (aspectRatio < 1) delta *= aspectRatio;\r\n    return delta;\r\n}\r\n\r\nfunction correctDeltaY (delta) {\r\n    let aspectRatio = canvas.width / canvas.height;\r\n    if (aspectRatio > 1) delta /= aspectRatio;\r\n    return delta;\r\n}\r\n\r\nwindow.generateColor = function generateColor () {\r\n    let c = HSVtoRGB(Math.random(), 1.0, 1.0);\r\n    c.r *= 0.15;\r\n    c.g *= 0.15;\r\n    c.b *= 0.15;\r\n    return c;\r\n}\r\n\r\nfunction HSVtoRGB (h, s, v) {\r\n    let r, g, b, i, f, p, q, t;\r\n    i = Math.floor(h * 6);\r\n    f = h * 6 - i;\r\n    p = v * (1 - s);\r\n    q = v * (1 - f * s);\r\n    t = v * (1 - (1 - f) * s);\r\n\r\n    switch (i % 6) {\r\n        case 0: r = v, g = t, b = p; break;\r\n        case 1: r = q, g = v, b = p; break;\r\n        case 2: r = p, g = v, b = t; break;\r\n        case 3: r = p, g = q, b = v; break;\r\n        case 4: r = t, g = p, b = v; break;\r\n        case 5: r = v, g = p, b = q; break;\r\n    }\r\n\r\n    return {\r\n        r,\r\n        g,\r\n        b\r\n    };\r\n}\r\n\r\nfunction normalizeColor (input) {\r\n    let output = {\r\n        r: input.r / 255,\r\n        g: input.g / 255,\r\n        b: input.b / 255\r\n    };\r\n    return output;\r\n}\r\n\r\nfunction wrap (value, min, max) {\r\n    let range = max - min;\r\n    if (range == 0) return min;\r\n    return (value - min) % range + min;\r\n}\r\n\r\nfunction getResolution (resolution) {\r\n    let aspectRatio = gl.drawingBufferWidth / gl.drawingBufferHeight;\r\n    if (aspectRatio < 1)\r\n        aspectRatio = 1.0 / aspectRatio;\r\n\r\n    let min = Math.round(resolution);\r\n    let max = Math.round(resolution * aspectRatio);\r\n\r\n    if (gl.drawingBufferWidth > gl.drawingBufferHeight)\r\n        return { width: max, height: min };\r\n    else\r\n        return { width: min, height: max };\r\n}\r\n\r\nfunction getTextureScale (texture, width, height) {\r\n    return {\r\n        x: width / texture.width,\r\n        y: height / texture.height\r\n    };\r\n}\r\n\r\nfunction scaleByPixelRatio (input) {\r\n    //FUCK RESPONSIVE.\r\n    return Math.floor(input);\r\n    let pixelRatio = window.devicePixelRatio || 1;\r\n    return Math.floor(input * pixelRatio);\r\n}\r\n\r\nfunction hashCode (s) {\r\n    if (s.length == 0) return 0;\r\n    let hash = 0;\r\n    for (let i = 0; i < s.length; i++) {\r\n        hash = (hash << 5) - hash + s.charCodeAt(i);\r\n        hash |= 0; // Convert to 32bit integer\r\n    }\r\n    return hash;\r\n};",null]}