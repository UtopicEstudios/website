{"mappings":"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","sources":["node_modules/simplestatemanager/src/utils.js","node_modules/simplestatemanager/src/state.js","src/logic/index.js","node_modules/simplestatemanager/src/ssm.js"],"names":["fireAllMethodsInArray","arr","event","forEach","method","configOptions","stateChangeMethod","State","constructor","options","this","id","Math","random","toString","substr","query","Object","assign","onEnter","onLeave","onResize","onFirstRun","testConfigOptions","valid","active","init","test","window","matchMedia","matches","enterState","listener","changed","leaveState","addListener","$b9638ca9e9eb8c3af26fcd89c58aa23$export$fireAllMethodsInArray","eventData","resizeState","destroy","removeListener","attachCallback","type","callback","runIfActive","push","when","configOption","name","bind","eventType","state","[object Object]","item","index","splice","func","Error","panels","states","resizeTimer","addEventListener","timeout","args","cancelAnimationFrame","requestAnimationFrame","apply","$b9638ca9e9eb8c3af26fcd89c58aa23$export$debounce","resizeBrowser","addState","newState","$c25ec78221bf7511702c9ee4cfcba4$export$default","addStates","statesArray","getState","filter","isActive","getStates","idArr","map","removeState","removeStates","idArray","removeAllStates","addConfigOption","removeConfigOption","getConfigOptions","key","value","stateChange","setStateChangeMethod","slides","document","querySelector","onMouseOver","e","call","projects","p","classList","remove","target","add","querySelectorAll","isInViewport","elem","distance","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","$d2cb6c96b007a07e4fba2401eaf62$export$default","Glide","perView","focusAt","breakpoints","960","1300","startAt","on","mount","preventDefault","scrollDown","detail","wheelDelta","deltaY","setTimeout","go"],"version":3,"file":"logic.4cc00894.js.map","sourcesContent":["export function filterStates(states, key, value) {\n    return states.filter(state => state[key] && state[key] === value);\n}\n\nexport function makeID() {\n    return Math.random().toString(36).substr(2, 9);\n}\n\nexport function fireAllMethodsInArray(arr, event) {\n    arr.forEach(method => method(event));\n}\n\nexport function funcToArray(func) {\n    return typeof func === 'function' ? [func] : func;\n}\n\nexport function debounce(func) {\n    let timeout;\n\n    return (...args) => {\n        const later = () => {\n            timeout = null;\n            func.apply(this, args);\n        };\n\n        if (timeout) {\n            window.cancelAnimationFrame(timeout);\n        }\n\n        timeout = window.requestAnimationFrame(later);\n    };\n}\n","import {\n    fireAllMethodsInArray,\n    makeID,\n} from './utils';\n\nconst configOptions = [];\nlet stateChangeMethod = () => { };\n\nexport default class State {\n    constructor(options) {\n        this.id = options.id || makeID();\n        this.query = options.query || 'all';\n\n        const defaultOptions = {\n            onEnter: [],\n            onLeave: [],\n            onResize: [],\n            onFirstRun: [],\n        };\n\n        // Merge options with defaults to make the state\n        this.options = Object.assign({}, defaultOptions, options);\n\n        // Migrate methods into an array, this is to enable future functionality of adding extra methods to an existing state\n        if (typeof this.options.onEnter === 'function') {\n            this.options.onEnter = [this.options.onEnter];\n        }\n\n        if (typeof this.options.onLeave === 'function') {\n            this.options.onLeave = [this.options.onLeave];\n        }\n\n        if (typeof this.options.onResize === 'function') {\n            this.options.onResize = [this.options.onResize];\n        }\n\n        if (typeof this.options.onFirstRun === 'function') {\n            this.options.onFirstRun = [this.options.onFirstRun];\n        }\n\n        // Test the one time tests first, if the test is invalid we wont create the config option\n        if (this.testConfigOptions('once') === false) {\n            this.valid = false;\n            return false;\n        }\n\n        this.valid = true;\n        this.active = false;\n        this.init();\n    }\n\n    init() {\n        this.test = window.matchMedia(this.query);\n\n        if (this.test.matches && this.testConfigOptions('match')) {\n            this.enterState();\n        }\n\n        this.listener = (test) => {\n            let changed = false;\n\n            if (test.matches) {\n                if (this.testConfigOptions('match')) {\n                    this.enterState();\n                    changed = true;\n                }\n            } else {\n                this.leaveState();\n                changed = true;\n            }\n\n            if (changed) {\n                stateChangeMethod();\n            }\n        };\n\n        this.test.addListener(this.listener);\n    }\n\n    // Handle entering a state\n    enterState() {\n        fireAllMethodsInArray(this.options.onFirstRun, this.eventData('firstRun'));\n        fireAllMethodsInArray(this.options.onEnter, this.eventData('enter'));\n        this.options.onFirstRun = [];\n        this.active = true;\n    }\n\n    // Handle leaving a state\n    leaveState() {\n        fireAllMethodsInArray(this.options.onLeave, this.eventData('leave'));\n        this.active = false;\n    }\n\n    // Handle the user resizing the browser\n    resizeState() {\n        if (this.testConfigOptions('resize')) {\n            fireAllMethodsInArray(this.options.onResize, this.eventData('resize'));\n        }\n    }\n\n    // When the StateManager removes a state we want to remove the event listener\n    destroy() {\n        this.test.removeListener(this.listener);\n    }\n\n    attachCallback(type, callback, runIfActive) {\n        switch (type) {\n        case 'enter':\n            this.options.onEnter.push(callback);\n            break;\n        case 'leave':\n            this.options.onLeave.push(callback);\n            break;\n        case 'resize':\n            this.options.onResize.push(callback);\n            break;\n        default:\n            break;\n        }\n\n        if (type === 'enter' && runIfActive && this.active) {\n            callback(this.eventData(type));\n        }\n    }\n\n    testConfigOptions(when) {\n        let test = true;\n\n        configOptions.forEach((configOption) => {\n            if (typeof this.options[configOption.name] !== 'undefined') {\n                if (configOption.when === when && configOption.test.bind(this)() === false) {\n                    test = false;\n                }\n            }\n        });\n\n        return test;\n    }\n\n    eventData(eventType) {\n        return {\n            eventType,\n            state: this,\n        };\n    }\n\n    static addConfigOption(configOption) {\n        configOptions.push(configOption);\n    }\n\n    static getConfigOptions() {\n        return configOptions;\n    }\n\n    static removeConfigOption(name) {\n        configOptions.forEach((item, index) => {\n            if (item.name === name) {\n                configOptions.splice(index, 1);\n            }\n        });\n    }\n\n    static setStateChangeMethod(func) {\n        if (typeof func === 'function') {\n            stateChangeMethod = func;\n        } else {\n            throw new Error('Not a function');\n        }\n    }\n}\n","import ssm from 'simplestatemanager';\r\n\r\nlet panels;\r\nlet timeout = null;\r\nconst speed = 100;\r\nlet slides  = document.querySelector(\".glide__slides\");\r\n\r\nconst onMouseOver = function(e) {\r\n    [].forEach.call(projects, function(p){\r\n        p.classList.remove('hover');\r\n    });\r\n    e.target.classList.add('hover');\r\n};\r\n\r\nconst projects = document.querySelectorAll('.project');\r\n\r\n[].forEach.call(projects, function(p) {\r\n    p.addEventListener('mouseenter', onMouseOver, false)\r\n});\r\n\r\nwindow.addEventListener('scroll', function (event) {\r\n    [].forEach.call(projects, function(p){\r\n        if (isInViewport(p))\r\n            p.classList.add('hover');\r\n        else\r\n            p.classList.remove('hover');\r\n    });\r\n}, false);\r\n\r\nconst isInViewport = function (elem) {\r\n    const distance = elem.getBoundingClientRect();\r\n    return (\r\n        distance.top >= 0 &&\r\n        distance.left >= 0 &&\r\n        distance.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\r\n        distance.right <= (window.innerWidth || document.documentElement.clientWidth)\r\n    );\r\n};\r\n\r\nssm.addState({\r\n    id: \"mobile\",\r\n    query: \"(min-width: 700px)\",\r\n    onEnter: function() {\r\n        slides.classList.remove(\"flex-column\")\r\n        panels = new Glide('#carousel',\r\n            {\r\n                type: 'slider',\r\n                perView: 4,\r\n                focusAt: 'center',\r\n                breakpoints: {\r\n                    960: {\r\n                        perView: 2\r\n                    },\r\n                    1300: {\r\n                        perView: 3\r\n                    }\r\n                },\r\n                startAt: 2\r\n            }\r\n        );\r\n        panels.on(['run.after', 'mount.after'], function(e){\r\n            let elem = document.querySelector(\".glide__slide--active .project\");\r\n            if (elem)\r\n                onMouseOver({\"target\": elem});\r\n        });\r\n\r\n        panels.mount();\r\n    },\r\n    onLeave: function() {\r\n        slides.classList.add(\"flex-column\")\r\n        panels.destroy()\r\n    }\r\n});\r\n\r\ndocument.querySelector('#carousel').addEventListener('wheel', (function(event) {\r\n    if (timeout !== null) {\r\n        event.preventDefault();\r\n        return false;\r\n    }\r\n\r\n    let delta = event.detail ? event.detail * (-120) : (event.wheelDelta ? event.wheelDelta : (event.deltaY ? event.deltaY  * (-120) : 0));\r\n\r\n    let scrollDown = delta < 0;\r\n    let canScroll = !document.querySelector(\".glide__slides.flex-column\");\r\n\r\n    if (canScroll) {\r\n        timeout = setTimeout(function(){timeout = null;}, speed);\r\n        event.preventDefault();\r\n        if (scrollDown) {\r\n            panels.go(\"<\");\r\n        } else {\r\n            panels.go(\">\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}));","import State from './state';\nimport {\n    debounce,\n    filterStates,\n} from './utils';\n\n// State Manager Constructor\nclass StateManager {\n    constructor() {\n        this.states = [];\n        this.resizeTimer = null;\n        this.configOptions = [];\n\n        window.addEventListener('resize', debounce(this.resizeBrowser.bind(this), 25), true);\n    }\n\n    addState(options) {\n        const newState = new State(options);\n\n        if (newState.valid) {\n            this.states.push(newState);\n        }\n\n        return newState;\n    }\n\n    addStates(statesArray) {\n        statesArray.forEach(state => this.addState(state));\n    }\n\n    getState(id) {\n        const selectedState = this.states.filter(state => state.id === id);\n\n        return selectedState[0] || false;\n    }\n\n    isActive(id) {\n        const selectedState = this.getState(id) || {};\n\n        return selectedState.active || false;\n    }\n\n    getStates(idArr) {\n        if (typeof (idArr) === 'undefined') {\n            return this.states;\n        }\n\n        return idArr.map(id => this.getState(id));\n    }\n\n    removeState(id) {\n        this.states.forEach((state, index) => {\n            if (state.id === id) {\n                state.destroy();\n                this.states.splice(index, 1);\n            }\n        });\n    }\n\n    removeStates(idArray) {\n        idArray.forEach(id => this.removeState(id));\n    }\n\n    removeAllStates() {\n        this.states.forEach(state => state.destroy());\n        this.states = [];\n    }\n\n    addConfigOption({\n        name = '', // name, this is used to apply to a state\n        test = null, // function which will perform the test\n        when = 'resize', // resize or match (match will mean that resize will never fire either), or once (which will test once, then delete state if test doesnt pass)\n    }) {\n        if (name !== '' && test !== null) {\n            State.addConfigOption({\n                name,\n                test,\n                when,\n            });\n        }\n    }\n\n    removeConfigOption(name) {\n        State.removeConfigOption(name);\n    }\n\n    getConfigOptions(name) {\n        const configOptions = State.getConfigOptions();\n\n        if (typeof name === 'string') {\n            return configOptions.filter(configOption => configOption.name === name);\n        }\n\n        return configOptions;\n    }\n\n    resizeBrowser() {\n        const activeStates = filterStates(this.states, 'active', true);\n\n        activeStates.forEach((state) => {\n            state.resizeState();\n        });\n    }\n\n    stateChange(func) {\n        State.setStateChangeMethod(func);\n    }\n}\n\nexport default new StateManager();\n"]}